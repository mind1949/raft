syntax = "proto3";

option go_package  = "github.com/mind1949/raft";

import "log.proto";
import "google/protobuf/timestamp.proto";


service RPC {
    rpc appendEntries(AppendEntriesArgs) returns (AppendEntriesResults);
    rpc requestVote(RequestVoteArgs)returns(RequestVoteResults);
    rpc installSnapshot(stream InstallSnapshotArgs) returns(InstallSnapshotResults);
}

// AppendEntriesArgs
message AppendEntriesArgs {
    // leader’s term
    uint64 term = 1;
    // so follower can redirect clients
    string leaderId = 2;

    // index of log entry immediately preceding new ones
    uint64 prevLogIndex = 3;
    // term of prevLogIndex entry
    uint64 prevLogTerm = 4;

	// log entries to store (empty for heartbeat;
	// may send more than one for efficiency)
    repeated AppendEntriesArgsLogEntry entries = 5;
    
    // leader’s commitIndex
    uint64 leaderCommit =6;
}

// AppendEntriesArgsLogEntry raft log entry
//	each entry contains command for state machine,
//	and term when entry was received by leader (first index is 1)
message AppendEntriesArgsLogEntry {
	uint64 index = 1;
	uint64 Term = 2;
    logEntryType type = 3;
	bytes Command  = 4;
	google.protobuf.Timestamp AppendTime = 5;
}

// AppendEntriesResults
message AppendEntriesResults {
    // currentTerm
    uint64 term = 1;
    // for leader to update itself success true
	// if follower contained entry matching
    bool success = 2;
}

// RequestVoteArgs
message RequestVoteArgs {
    // term candidate’s term
    uint64 term = 1;
    // candidateId candidate requesting vote
    string candidateId = 2;
    // lastLogIndex index of candidate’s last log entry (§5.4)
    uint64 lastLogIndex = 3;
    // lastLogTerm term of candidate’s last log entry (§5.4)
    uint64 lastLogTerm = 4;
}

// RequestVoteResults
message RequestVoteResults {
    // currentTerm, for candidate to update itself
    uint64 term = 1;
    // true means candidate received vote
    bool VoteGranted = 2; 
}

// InstallSnapshotArgs
message InstallSnapshotArgs {
    // term candidate’s term
    uint64 term = 1;
    // leaderId so follower can redirect clients
    string leaderId = 2;
	// LastIncludedIndex the snapshot replaces all entries up through
	// and including this index
    uint64 lastIncludedIndex = 3;
    // lastIncludedTerm term of lastIncludedIndex
    uint64 lastIncludedTerm = 4;
    // offset byte offset where chunk is positioned in the
	// snapshot file
    int64 offset = 5;
    // data[] raw bytes of the snapshot chunk, starting at offset
    bytes data = 6;
    // done true if this is the last chunk
    bool done = 7;
}

// InstallSnapshotResults
message InstallSnapshotResults {
	// Term currentTerm, for leader to update itself
	uint64 Term = 1;
}
