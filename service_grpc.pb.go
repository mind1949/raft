// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package raft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesResults, error)
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteResults, error)
	InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RPC_InstallSnapshotClient, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesResults, error) {
	out := new(AppendEntriesResults)
	err := c.cc.Invoke(ctx, "/RPC/appendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteResults, error) {
	out := new(RequestVoteResults)
	err := c.cc.Invoke(ctx, "/RPC/requestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) InstallSnapshot(ctx context.Context, opts ...grpc.CallOption) (RPC_InstallSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPC_ServiceDesc.Streams[0], "/RPC/installSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCInstallSnapshotClient{stream}
	return x, nil
}

type RPC_InstallSnapshotClient interface {
	Send(*InstallSnapshotArgs) error
	CloseAndRecv() (*InstallSnapshotResults, error)
	grpc.ClientStream
}

type rPCInstallSnapshotClient struct {
	grpc.ClientStream
}

func (x *rPCInstallSnapshotClient) Send(m *InstallSnapshotArgs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCInstallSnapshotClient) CloseAndRecv() (*InstallSnapshotResults, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InstallSnapshotResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesResults, error)
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteResults, error)
	InstallSnapshot(RPC_InstallSnapshotServer) error
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRPCServer) RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRPCServer) InstallSnapshot(RPC_InstallSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method InstallSnapshot not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/appendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/requestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_InstallSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).InstallSnapshot(&rPCInstallSnapshotServer{stream})
}

type RPC_InstallSnapshotServer interface {
	SendAndClose(*InstallSnapshotResults) error
	Recv() (*InstallSnapshotArgs, error)
	grpc.ServerStream
}

type rPCInstallSnapshotServer struct {
	grpc.ServerStream
}

func (x *rPCInstallSnapshotServer) SendAndClose(m *InstallSnapshotResults) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCInstallSnapshotServer) Recv() (*InstallSnapshotArgs, error) {
	m := new(InstallSnapshotArgs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "appendEntries",
			Handler:    _RPC_AppendEntries_Handler,
		},
		{
			MethodName: "requestVote",
			Handler:    _RPC_RequestVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "installSnapshot",
			Handler:       _RPC_InstallSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
